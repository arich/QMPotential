package com.QMTunnelling;

import com.CapstonePhys.QMPotentialTest.R;
import com.QMTunnelling.GaussianPotential;
import com.jjoe64.graphview.GraphView;
import com.jjoe64.graphview.LineGraphView;
import com.jjoe64.graphview.GraphView.*;


import android.app.Activity;
import android.os.Bundle;
import android.graphics.Color;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.widget.LinearLayout;
import android.widget.SeekBar;
import android.widget.TextView;

import java.text.DecimalFormat;
import java.text.NumberFormat;
/**
 * QMPotentialActvity
 * @author AndrewRich
 * 
 *  This file is part of QMPotential.

    QMPotential is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    QMPotential is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with QMPotential.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
public class QMPotentialActivity extends Activity{
	//Global objects/variables
    //Hardcoded initial Kappa and alpha for now:
    final double INITKAPPA = 1;
    final double INITALPHA = 1.75;
    NumberFormat formatter = new DecimalFormat("#0.000");
    
	GaussianPotential gp = new GaussianPotential(INITKAPPA, INITALPHA); 
	
	GraphViewSeries vSeries;
	GraphViewSeries psiSeries;
	GraphViewSeries kappaLine;
	
	TextView transmitTextView;
	TextView reflectTextView;
	
    SeekBar kappaSeekBar;
    SeekBar alphaSeekBar;
	
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        kappaSeekBar = (SeekBar) findViewById(R.id.kappabar);
        kappaSeekBar.setBackgroundColor(Color.BLUE);
        kappaSeekBar.setOnSeekBarChangeListener( 
        		new SeekBar.OnSeekBarChangeListener() {
					
					@Override
					public void onStopTrackingTouch(SeekBar seekBar) {

					}
					
					@Override
					public void onStartTrackingTouch(SeekBar seekBar) {

					}
					
					@Override
					public void onProgressChanged(SeekBar seekBar, int progress,
							boolean fromUser) {
						gp.setKappa((double) (progress+1)/100); //Progress out of 500
						refreshPlot();
					}
				});
       
        alphaSeekBar = (SeekBar) findViewById(R.id.alphabar);
        alphaSeekBar.setBackgroundColor(Color.RED);
        alphaSeekBar.setOnSeekBarChangeListener( 
        		new SeekBar.OnSeekBarChangeListener() {
					
					@Override
					public void onStopTrackingTouch(SeekBar seekBar) {
						
					}
					
					@Override
					public void onStartTrackingTouch(SeekBar seekBar) {
						
					}
					
					@Override
					public void onProgressChanged(SeekBar seekBar, int progress,
							boolean fromUser) {
						gp.setAlpha((double) (progress+1) /100); //Progress out of 500
						refreshPlot();
					}
				});
        refreshPlot();
    }
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.potential_menu, menu);
        return true;
    }
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle item selection
        switch (item.getItemId()) {
            case R.id.gaussian:
                //Handle Gaussian
            	gp.setPotentialType(1);
            	refreshPlot();
                return true;
            case R.id.uniform:
                //Handle Uniform distribution
            	gp.setPotentialType(2);
            	refreshPlot();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }
    /**
     * Refreshing the plot
     */
    public void refreshPlot(){    	
        //Getting GaussianPotential data
    	gp.initValues();
    	gp.integrateFun();
    	double Transmitted = gp.getT();
    	double Reflected = 1-Transmitted;      //Reflected so we don't overwrite the 
    										   //special autogenerated R files
    	vSeries = getPotential();
    	psiSeries = getData();
    	kappaLine = getKappaLine();
    	GraphView graphView = new LineGraphView(  
    			this, // context  
    			""
    			//blank title. 
    			); 
    	((LineGraphView) graphView).setDrawBackground(true);
    	graphView.addSeries(psiSeries); // Add Psi data
    	graphView.addSeries(vSeries);   // Add V(x) data
        graphView.addSeries(kappaLine); // Add kappa Line
        
     // set view port, start=-5, size=10  optional stuff
        //graphView.setViewPort(-5, 10);
        graphView.setScrollable(false);  
        // optional - activate scaling / zooming  
        graphView.setScalable(false); 

        LinearLayout layout = (LinearLayout) findViewById(R.id.llplot);
        layout.removeAllViews();
        layout.addView(graphView);
        
        transmitTextView = (TextView) findViewById(R.id.transmitText);
        reflectTextView = (TextView) findViewById(R.id.reflectText);
        
        transmitTextView.setText("T: "+formatter.format(Transmitted));
        reflectTextView.setText("R: "+formatter.format(Reflected));
    }
    
    /**
     * Static function to return GraphViewSeries data of Psi(x)
     * @param gp The gaussianParameter object used here
     * @return series Psi(x) vs. x in the GraphViewSeries format
     */
    public GraphViewSeries getData(){
    	double[] x = gp.getXvals();
    	double[] psi = gp.getRealPsi();
    	psi = normalizePsi(psi);
    	GraphViewData[] data = new GraphViewData[x.length];
    	for(int i=0; i<x.length; i++){
    		data [i] = new GraphViewData(x[i], psi[i]);
    	}
    	GraphViewSeries series = new GraphViewSeries("Psi", null, data);
    	return series;
    	}
    /**
     * Static function to return GraphViewSeries data of V(x)
     * @param gp The gaussianParameter object used here
     * @return series V(x) vs. x in the GraphViewSeries format
     */
    public GraphViewSeries getPotential(){
    	double alph = gp.getAlpha();
    	double[] x = gp.getXvals();
    	double[] V = new double[x.length];
    	for(int i = 0; i<x.length; i++){
    		V[i]= gp.getPotentialVal(x[i], alph);
    	}
    	GraphViewData[] data = new GraphViewData[x.length];
    	for(int j=0; j<x.length; j++){
    		data [j] = new GraphViewData(x[j], V[j]);
    	}
    	GraphViewSeries series = new GraphViewSeries("V(x)", Color.rgb(200, 0, 0), data);
    	return series;
    }
    /**
     * Returns the GraphViewSeries needed to draw a line corresponding to the kappa 
     * energy level on the plot.
     * @return GraphViewSeries series, a straight line corresponding to the current kappa value.
     */
    public GraphViewSeries getKappaLine(){
    	double kappa = gp.getKappa();
    	double[] x = gp.getXvals();
    	GraphViewData[] data = new GraphViewData[x.length];
    	for(int j=0; j<x.length; j++){
    		data [j] = new GraphViewData(x[j], kappa);
    	}
    	GraphViewSeries series = new GraphViewSeries("V(x)", Color.CYAN, data);
    	return series;
    }
    /**
     * This normalizes psi.
     * @param psi Real Psi values to be normalized. 
     * @return psi A vector of normalized psi values. 
     */
	public double[] normalizePsi(double psi[]){
		double maxPsi = gp.maxValPsi();
		for(int i=0; i<2*gp.getNMAX(); i++){
			psi[i] = psi[i]/maxPsi;
		}
		return psi;
	}
}