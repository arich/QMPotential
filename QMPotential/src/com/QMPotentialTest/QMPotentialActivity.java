package com.QMPotentialTest;

import com.CapstonePhys.QMPotentialTest.R;
import com.QMPotentialTest.GaussianPotential;
import com.jjoe64.graphview.GraphView;
import com.jjoe64.graphview.LineGraphView;
import com.jjoe64.graphview.GraphView.*;


import android.app.Activity;
import android.os.Bundle;
import android.graphics.Color;
import android.widget.LinearLayout;
import android.widget.SeekBar;

import java.text.DecimalFormat;
import java.text.NumberFormat;

public class QMPotentialActivity extends Activity implements SeekBar.OnSeekBarChangeListener{

	
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        SeekBar kappaSeekBar;
        
        //Hardcoded Kappa and alpha for now:
        final double kappa = .8;
        final double alpha = 1.5;
        
        final GaussianPotential gp = new GaussianPotential(kappa, alpha); 
        
        refreshPlot(gp, kappa, alpha);
        
        kappaSeekBar = (SeekBar) findViewById(R.id.kappabar);
        kappaSeekBar.setMax(5);
        kappaSeekBar.setOnSeekBarChangeListener( 
        		new SeekBar.OnSeekBarChangeListener() {
					
					@Override
					public void onStopTrackingTouch(SeekBar seekBar) {
						// TODO Auto-generated method stub
					}
					
					@Override
					public void onStartTrackingTouch(SeekBar seekBar) {
						// TODO Auto-generated method stub
					}
					
					@Override
					public void onProgressChanged(SeekBar seekBar, int progress,
							boolean fromUser) {
						// TODO Auto-generated method stub
						gp.setKappa(gp.getKappa()+progress);
						refreshPlot(gp, gp.getKappa(), gp.getAlpha());
					}
				});
				
    }
    /**
     * Function used to refresh the plot each time for new values of kappa and alpha. 
     * @param kappa Energy level of the free particle
     * @param alpha	Energy level of the potential
     */
    public void refreshPlot(GaussianPotential gp, double kappa, double alpha){
    	//formatting numbers
        NumberFormat formatter = new DecimalFormat("#0.000");
    	
        //Getting GaussianPotential data
    	gp.initValues();
    	gp.integrateFun();
    	double Transmitted = gp.getT();
    	double Reflected = 1-Transmitted;      //Reflected so we don't overwrite the 
    										   //special autogenerated R files

    	GraphViewSeries vSeries = getPotential(gp);
    	GraphViewSeries psiSeries = getData(gp);

    	GraphView graphView = new LineGraphView(  
    			this, // context  
    			"T: "+formatter.format(Transmitted)+
    			"     R: "+formatter.format(Reflected)  //Format the decimals to *.*** format.
    			); 
    	graphView.addSeries(psiSeries); // Add Psi data
    	graphView.addSeries(vSeries);   // Add V(x) data
        
        
     // set view port, start=-5, size=10  
        //graphView.setViewPort(-5, 10);
        graphView.setScrollable(false);  
        // optional - activate scaling / zooming  
        graphView.setScalable(false); 
          
        LinearLayout layout = (LinearLayout) findViewById(R.id.ll);
        layout.addView(graphView);
    }
    
    /**
     * Static function to return GraphViewSeries data of Psi(x)
     * @param gp The gaussianParameter object used here
     * @return series Psi(x) vs. x in the GraphViewSeries format
     */
    public static GraphViewSeries getData(GaussianPotential gp){
    	double[] x = gp.getXvals();
    	double[] psi = gp.getRealPsi();
    	GraphViewData[] data = new GraphViewData[x.length];
    	for(int i=0; i<x.length; i++){
    		data [i] = new GraphViewData(x[i], psi[i]);
    	}
    	GraphViewSeries series = new GraphViewSeries("Psi", Color.rgb(0, 200, 0), data);
    	return series;
    	}
    /**
     * Static function to return GraphViewSeries data of V(x)
     * @param gp The gaussianParameter object used here
     * @return series V(x) vs. x in the GraphViewSeries format
     */
    public static GraphViewSeries getPotential(GaussianPotential gp){
    	double alph = gp.getAlpha();
    	double[] x = gp.getXvals();
    	double[] V = new double[x.length];
    	for(int i = 0; i<x.length; i++){
    		V[i]= gp.van(alph, x[i]);
    	}
    	GraphViewData[] data = new GraphViewData[x.length];
    	for(int j=0; j<x.length; j++){
    		data [j] = new GraphViewData(x[j], V[j]);
    	}
    	GraphViewSeries series = new GraphViewSeries("V(x)", Color.rgb(200, 0, 0), data);
    	return series;
    }
	@Override
	public void onProgressChanged(SeekBar seekBar, int progress,
			boolean fromUser) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void onStartTrackingTouch(SeekBar seekBar) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void onStopTrackingTouch(SeekBar seekBar) {
		// TODO Auto-generated method stub
		
	}
}