package com.QMPotentialTest;

import com.CapstonePhys.QMPotentialTest.R;
import com.QMPotentialTest.GaussianPotential;
import com.jjoe64.graphview.GraphView;
import com.jjoe64.graphview.LineGraphView;
import com.jjoe64.graphview.GraphView.*;


import android.app.Activity;
import android.os.Bundle;
import android.graphics.Color;
import android.graphics.PointF;
import android.util.FloatMath;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.widget.LinearLayout;

import java.text.DecimalFormat;
import java.util.Timer;
import java.util.TimerTask;
import java.util.Vector;

public class QMPotentialActivity extends Activity {

	
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        //Hardcoded Kappa and alpha for now:
        double kappa = .8;
        double alpha = 1.5;
        
        //Getting GaussianPotential data
        GaussianPotential gp = new GaussianPotential(kappa, alpha);
    	gp.initValues();
    	gp.integrateFun();
    	double Transmitted = gp.getT();
    	double Reflected = 1-Transmitted;      //Reflected so we don't overwrite the 
    										   //special autogenerated R files
        
        GraphViewSeries vSeries = getPotential(gp);
        GraphViewSeries psiSeries = getData(gp);
          
        GraphView graphView = new LineGraphView(  
              this // context  
              , "T: "+Transmitted+
              "\n   R: "+Reflected 
        );  
        graphView.addSeries(psiSeries); // Add Psi data
        graphView.addSeries(vSeries);   // Add V(x) data
          
        LinearLayout layout = (LinearLayout) findViewById(R.id.ll);
        layout.addView(graphView);
      
    }
    /**
     * Static function to return GraphViewSeries data of Psi(x)
     * @param gp The gaussianParameter object used here
     * @return series Psi(x) vs. x in the GraphViewSeries format
     */
    public static GraphViewSeries getData(GaussianPotential gp){
    	double[] x = gp.getXvals();
    	double[] psi = gp.getRealPsi();
    	GraphViewData[] data = new GraphViewData[x.length];
    	for(int i=0; i<x.length; i++){
    		data [i] = new GraphViewData(x[i], psi[i]);
    	}
    	GraphViewSeries series = new GraphViewSeries("Psi", Color.rgb(0, 200, 0), data);
    	return series;
    	}
    /**
     * Static function to return GraphViewSeries data of V(x)
     * @param gp The gaussianParameter object used here
     * @return series V(x) vs. x in the GraphViewSeries format
     */
    public static GraphViewSeries getPotential(GaussianPotential gp){
    	double alph = gp.getAlpha();
    	double[] x = gp.getXvals();
    	double[] V = new double[x.length];
    	for(int i = 0; i<x.length; i++){
    		V[i]= gp.van(alph, x[i]);
    	}
    	GraphViewData[] data = new GraphViewData[x.length];
    	for(int j=0; j<x.length; j++){
    		data [j] = new GraphViewData(x[j], V[j]);
    	}
    	GraphViewSeries series = new GraphViewSeries("V(x)", Color.rgb(200, 0, 0), data);
    	return series;
    }
}